% Direct paths r as known facts
r((1,0)).
r((2,0)).
r((3,0)).

% Indirect paths generated by route announcements from a neighbor
r((2,1,0)) :- b((1,0)).
r((4,2,0)) :- b((2,0)).
r((3,4,2,0)) :- b((2,0)), b((4,2,0)).
r((1,3,0)) :- b((3,0)).
r((4,3,0)) :- b((3,0)).

% p is node path preference (first) over (second)
% s(node,t/f) is the repair for swapping preference

s(1, f) :- p(1, (1,3,0), (1,0)).
s(1, t) :- p(1, (1,0), (1,3,0)).
s(2, f) :- p(2, (2,1,0), (2,0)).
s(2, t) :- p(2, (2,0), (2,1,0)).
s(3, f) :- p(3, (3,4,2,0), (3,0)).
% s(3, t) :- p(3, (3,0), (3,4,2,0)).
s(4, f) :- p(4, (4,3,0), (4,2,0)).
s(4, t) :- p(4, (4,2,0), (4,3,0)).

% Disjunction to allow each node to select one of its preferred paths

p(1, (1,3,0), (1,0)) :- s(4, f).
p(2, (2,1,0), (2,0)) :- s(4, f).

1{p(1, (1,3,0), (1,0)) ; p(1, (1,0), (1,3,0))}1 :- s(4, t).
1{p(2, (2,1,0), (2,0)) ; p(2, (2,0), (2,1,0))}1 :- s(4, t).

p(3, (3,4,2,0), (3,0)).

1{p(4, (4,3,0), (4,2,0)) ; p(4, (4,2,0), (4,3,0))}1 :- s(3, f).

% Ranking function of the permitted paths b
% Node 1:
b((1,0)) :- r((1,0)), not r((1,3,0)), s(1, f).
b((1,3,0)) :- r((1,3,0)), s(1, f).

b((1,0)) :- r((1,0)), s(1, t).
b((1,3,0)) :- r((1,3,0)), not r((1,0)), s(1, t).

% Node 2:
b((2,0)) :- r((2,0)), not r((2,1,0)), s(2, f).
b((2,1,0)) :- r((2,1,0)), s(2, f).

b((2,0)) :- r((2,0)), s(2, t).
b((2,1,0)) :- r((2,1,0)), not r((2,0)), s(2, t).

% Node 3:
b((3,0)) :- r((3,0)), not r((3,4,2,0)), s(3, f).
b((3,4,2,0)) :- r((3,4,2,0)), s(3, f).

% b((3,0)) :- r((3,0)), s(3, t).
% b((3,4,2,0)) :- r((3,4,2,0)), not r((3,0)), s(3, t).

% Node 4:
b((4,2,0)) :- r((4,2,0)), not r((4,3,0)), s(4, f).     %Naghty
b((4,3,0)) :- r((4,3,0)), s(4, f).

b((4,2,0)) :- r((4,2,0)), s(4, t).                     %BadGadget
b((4,3,0)) :- r((4,3,0)), not r((4,2,0)), s(4, t).

% Add constraints to prevent both paths from being selected
:- b((1,0)), b((1,3,0)).
:- b((2,0)), b((2,1,0)).
:- b((3,0)), b((3,4,2,0)).
:- b((4,2,0)), b((4,3,0)).
