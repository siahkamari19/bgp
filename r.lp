% Direct routs r as known facts
rout((1..3,0)).

% Indirect routs generated by route announcements from a neighbor
rout((2,1,0)) :- path((1,0)).
rout((4,2,0)) :- path((2,0)).
rout((3,4,2,0)) :- path((2,0)), path((4,2,0)).
rout((1,3,0)) :- path((3,0)).
rout((4,3,0)) :- path((3,0)).

% pref is node path preference (first) over (second)
% swap(node,t/f) is the repair for swapping preference

swap(1,f) :- pref(1, (1,3,0), (1,0)).
swap(1,t) :- pref(1, (1,0), (1,3,0)).
swap(2,f) :- pref(2, (2,1,0), (2,0)).
swap(2,t) :- pref(2, (2,0), (2,1,0)).
swap(3,f) :- pref(3, (3,4,2,0), (3,0)).
swap(3,t) :- pref(3, (3,0), (3,4,2,0)).
swap(4,f) :- pref(4, (4,3,0), (4,2,0)).
swap(4,t) :- pref(4, (4,2,0), (4,3,0)).

% Disjunction to allow each node to select one of its preferred paths

pref(1, (1,3,0), (1,0)) :- swap(4,f).
pref(2, (2,1,0), (2,0)) :- swap(4,f).

1{pref(1, (1,3,0), (1,0)) ; pref(1, (1,0), (1,3,0))}1 :- swap(4,t).
1{pref(2, (2,1,0), (2,0)) ; pref(2, (2,0), (2,1,0))}1 :- swap(4,t).

pref(3, (3,4,2,0), (3,0)).

1{pref(4, (4,3,0), (4,2,0)) ; pref(4, (4,2,0), (4,3,0))}1 :- swap(3,f).

% Ranking function of the permitted paths
% Node 1:
path((1,0)) :- rout((1,0)), not rout((1,3,0)), swap(1,f).
path((1,3,0)) :- rout((1,3,0)), swap(1,f).

path((1,0)) :- rout((1,0)), swap(1,t).
path((1,3,0)) :- rout((1,3,0)), not rout((1,0)), swap(1,t).

% Node 2:
path((2,0)) :- rout((2,0)), not rout((2,1,0)), swap(2,f).
path((2,1,0)) :- rout((2,1,0)), swap(2,f).

path((2,0)) :- rout((2,0)), swap(2,t).
path((2,1,0)) :- rout((2,1,0)), not rout((2,0)), swap(2,t).

% Node 3:
path((3,0)) :- rout((3,0)), not rout((3,4,2,0)), swap(3,f).
path((3,4,2,0)) :- rout((3,4,2,0)), swap(3,f).

path((3,0)) :- rout((3,0)), swap(3,t).
path((3,4,2,0)) :- rout((3,4,2,0)), not rout((3,0)), swap(3,t).

% Node 4:
path((4,2,0)) :- rout((4,2,0)), not rout((4,3,0)), swap(4,f).     %Naghty
path((4,3,0)) :- rout((4,3,0)), swap(4,f).

path((4,2,0)) :- rout((4,2,0)), swap(4,t).                     %BadGadget
path((4,3,0)) :- rout((4,3,0)), not rout((4,2,0)), swap(4,t).

% Add constraints to prevent both paths from being selected
:- path((1,0)), path((1,3,0)).
:- path((2,0)), path((2,1,0)).
:- path((3,0)), path((3,4,2,0)).
:- path((4,2,0)), path((4,3,0)).
